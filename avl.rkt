#lang scheme

(define (entry tree) (car tree)) 
(define (left tree) (cadr tree)) 
(define (right tree) (caddr tree))
(define (height tree) 
  (cond ((null? tree) 0)
        (else (cadddr tree))
   )
  )

(define (make-leaf entry) (list entry `() `() 1))

(define (make-avl entry left right) 
  (list entry left right (+ 1 (max (height left) (height right))))
)

(define (contains-avl? x tree)
  (cond ((null? tree) false) 
        ((= x (entry tree)) true)
        ((< x (entry tree)) (contains-avl? x (left tree)))
        ((> x (entry tree)) (contains-avl? x (right tree)))
  )
)

(define (rotate-left tree) 
  (cond ((null? tree) tree)
        (else (make-avl (entry (left tree)) (left (left tree)) (make-avl (entry tree) (right (left tree)) (right tree))))
  )
)

(define (rotate-right tree)
  (cond ((null? tree) tree)
        (else (make-avl (entry (right tree)) (make-avl (entry tree) (left tree) (left (right tree))) (right (right tree))))
  )      
)

(define (rotate-left-right tree)
  (make-avl 
    (entry (right (left tree))) 
    (make-avl (entry (left tree)) (left (left tree)) (left (right (left tree)))) 
    (make-avl (entry tree) (right (right (left tree))) (right tree))
  )
)

(define (rotate-right-left tree)
   (make-avl
     (entry (left (right tree)))
     (make-avl (entry tree) (left tree) (left (left (right tree))))
     (make-avl (entry (right tree)) (right (left (right tree))) (right (right tree)))
   )
)

(define (balance-avl tree)
  (define (factor tree) (- (height (right tree)) (height (left tree))))
  (let ((tree-factor (factor tree))) 
    (cond ((= tree-factor 2) 
           (cond (
                  (< (factor (right tree)) 0) (rotate-right-left tree))
                  (else (rotate-right tree))            
            )
          )
          ((= tree-factor -2) 
           (cond (
                  (< (factor (left tree)) 0) (rotate-left-right tree))
                  (else (rotate-left tree))            
            )
          )
          (else tree)
     )
  )  
)

(define (insert-avl x tree)
  (define (insert-avl-internal x tree) 
    (cond ((null? tree) (make-leaf x))
          ((< x (entry tree)) 
           (let* ((newLeft (insert-avl-internal x (left tree))) (newRoot (make-avl (entry tree) newLeft (right tree)))) 
             (balance-avl newRoot)
             )
           )       
          ((> x (entry tree)) 
           (let* ((newRight (insert-avl-internal x (right tree))) (newRoot (make-avl (entry tree) (left tree) newRight))) 
             (balance-avl newRoot)
             )
           )
          (else tree)
     ) 
  )
  (cond ((contains-avl? x tree) tree)
        (else (insert-avl-internal x tree))
  )
)


(define (delete-avl x tree) 
  (define (delete-left-most tree) 
    (cond ((left-empty? tree) tree)
          (else (let* ((leftMost (delete-left-most (left tree))) (newRight (make-avl (entry tree) (right leftMost) (right tree)))) 
                  (make-avl (entry leftMost) `() (balance-avl newRight))
                )
           )
    )
  )
  (define (right-empty? tree) (null? (right tree)))
  (define (left-empty? tree) (null? (left tree)))
  (define (delete-avl-internal x tree ) 
    (cond
        ((< x (entry tree)) 
         (let* ((newLeft (delete-avl-internal x (left tree))) (newRoot (make-avl (entry tree) newLeft (right tree)))) 
           (balance-avl newRoot)
          )
        )
        ((> x (entry tree)) 
         (let* ((newRight (delete-avl-internal x (right tree))) (newRoot (make-avl (entry tree) (left tree) newRight))) 
           (balance-avl newRoot)
          )
        )
        ((= x (entry tree)) 
          (cond ((and (right-empty? tree) (left-empty? tree)) '())
                ((right-empty? tree) (left tree))
                ((left-empty? tree) (right tree))
                (else (let ((leftMost (delete-left-most (right tree))))
                         (make-avl (entry leftMost) (left tree) (right leftMost))
                      )
                )
           )
        )
     )
   )
  
  (cond ((contains-avl? x tree) (delete-avl-internal x tree))
        (else tree)
  )
)
